{"version":3,"sources":["utils/vectors.ts","utils/linalg.ts","components/MatrixInput.tsx","components/MatrixTransform.tsx","components/Reset.tsx","components/Info.tsx","App.tsx","index.tsx"],"names":["posToRGB","vector","x","Math","floor","y","z","vectorScale","objVector","pos","position","TWEEN","Tween","to","easing","Easing","Quadratic","Out","onUpdate","set","start","dimensions","dims","margin","top","right","bottom","left","padding","outerWidth","window","outerHeight","ticks","innerWidth","innerHeight","width","height","origin","unit","MatrixInput","props","rows","style","display","gridTemplateColumns","gridGap","zIndex","MatrixOpen","MatrixInputCell","value","classString","row","setRow","coords","length","MatrixClose","useState","current","setCurrent","inputWidth","setInputWidth","useEffect","className","onChange","e","target","textAlign","fontFamily","backgroundColor","color","fontSize","border","outline","d","stroke","strokeWidth","fill","MatrixTransform","matrix","vectorsDispatch","transpose","matrixString","i","elements","element","parseInt","toFixed","marginTop","onClick","type","Reset","defaultVectors","reset","useCallback","forEach","defaultVector","setVector","viewBox","xmlns","fill-rule","clip-rule","Info","isOpen","setIsOpen","handleClick","prev","href","App","ref","useRef","scene","THREE","renderer","antialias","setPixelRatio","devicePixelRatio","setSize","outputEncoding","material","specular","shininess","camera","appendChild","domElement","axisGeometry","xAxis","rotation","PI","yAxis","zAxis","add","coneGeometry","xCone","yCone","zCone","tickGeometry","xTick","yTick","zTick","light1","light2","OrbitControls","update","animate","requestAnimationFrame","render","graph","vectorsInit","squareCoords","vectors","push","squareTemplate","objects","vec","rgb","geometry","sphere","vectorCreate","useReducer","state","action","updatedVectors","_","cloneDeep","map","applyMatrix3","scaled","object","round","m00","m10","m20","m01","m11","m21","m02","m12","m22","m","eu","setFromRotationMatrix","initPos","euler","eulerMatrix","cos","sin","vectorRotate","newVectors","Error","undefined","row1","setRow1","row2","setRow2","row3","setRow3","svd","SingularValueDecomposition","marginBottom","justifyContent","marginLeft","marginRight","alignItems","fromArray","leftSingularVectors","getRow","diagonalMatrix","rightSingularVectors","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.060c8c7d.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport TWEEN from \"@tweenjs/tween.js\";\nimport _ from \"lodash\";\n\n/**\n * Creates a dot to represent a vector in `scene`. It also assigns a colour,\n * based on initial position, which makes it easier to differentiate between\n * vectors after transformations.\n * @param vector coordinates.\n * @param scene scene to add vector to.\n * @returns sphere object.\n */\nexport const vectorCreate = (\n  vector: THREE.Vector3,\n  scene: THREE.Scene\n): THREE.Mesh => {\n  const rgb = posToRGB(vector);\n\n  const material = new THREE.MeshPhongMaterial({\n    color: rgb,\n    specular: rgb,\n    shininess: 10,\n  });\n\n  const geometry = new THREE.SphereGeometry(0.2, 32, 32);\n  const sphere = new THREE.Mesh(geometry, material);\n  sphere.position.set(vector.x, vector.y, vector.z);\n  scene.add(sphere);\n\n  return sphere;\n};\n\n/**\n * Computes the RGB colour code to assign to a vector. It basically just\n * assigns the x-, y-, and z-component to the red, green, and blue channel,\n * respectively.\n * @param vector three dimensional vector.\n * @returns rgb colour code.\n */\nconst posToRGB = (vector: THREE.Vector3): string => {\n  const x = Math.floor(((vector.x + 8) / 17) * 255);\n  const y = Math.floor(((vector.y + 8) / 17) * 255);\n  const z = Math.floor(((vector.z + 8) / 17) * 255);\n\n  return `rgb(${x}, ${y}, ${z})`;\n};\n\n/**\n * Rotates the vector with the rotation matrix. Make sure that the length stays\n * the same after the transformation, because this function only works with\n * rotation matrices. If there is any chance of the matrix not being a rotation\n * matrix, make use of the `vectorScale()` function.\n *\n * This calculates the euler angle from the rotation matrix, after which it\n * tweens between 0 and the euler angle. Then, every iteration of the tween, it\n * computes the matrix for the current euler angle and applies it to the vector.\n * @param matrix rotation matrix.\n * @param objVector vector object to move.\n */\nexport const vectorRotate = (\n  matrix: THREE.Matrix3,\n  objVector: THREE.Mesh\n): void => {\n  // get angle and rotation axis from matrix\n  const [m00, m10, m20, m01, m11, m21, m02, m12, m22] = matrix.elements;\n\n  const m = new THREE.Matrix4();\n  m.set(m00, m01, m02, 1, m10, m11, m12, 1, m20, m21, m22, 1, 0, 0, 0, 1);\n\n  var eu = new THREE.Euler();\n  eu.setFromRotationMatrix(m, \"ZYX\");\n\n  const initPos = _.cloneDeep(objVector.position);\n  var euler = {\n    x: 0,\n    y: 0,\n    z: 0,\n  };\n  const e = { x: eu.x, y: eu.y, z: eu.z };\n\n  const tween = new TWEEN.Tween(euler)\n    .to(e, 1000)\n    .easing(TWEEN.Easing.Quadratic.Out)\n    .onUpdate(() => {\n      const eulerMatrix = new THREE.Matrix3();\n\n      // https://en.wikipedia.org/wiki/Rotation_formalisms_in_three_dimensions#Conversion_formulae_between_formalisms\n      const { x, y, z } = euler;\n      eulerMatrix.set(\n        Math.cos(y) * Math.cos(z),\n        -Math.cos(x) * Math.sin(z) + Math.sin(x) * Math.sin(y) * Math.cos(z),\n        Math.sin(x) * Math.sin(z) + Math.cos(x) * Math.sin(y) * Math.cos(z),\n        Math.cos(y) * Math.sin(z),\n        Math.cos(x) * Math.cos(z) + Math.sin(x) * Math.sin(y) * Math.sin(z),\n        -Math.sin(x) * Math.cos(z) + Math.cos(x) * Math.sin(y) * Math.sin(z),\n        -Math.sin(y),\n        Math.sin(x) * Math.cos(y),\n        Math.cos(x) * Math.cos(y)\n      );\n\n      const init = _.cloneDeep(initPos);\n      const pos = init.applyMatrix3(eulerMatrix);\n      objVector.position.set(pos.x, pos.y, pos.z);\n    });\n\n  tween.start();\n};\n\n/**\n * Moves `objVector` to the position of `vector` by scaling. It basically just\n * goes from the (x, y, z)-position of the object to the (x, y, z)-position of\n * the vector.\n * @param vector vector to go to.\n * @param objVector vector to move.\n */\nexport const vectorScale = (\n  vector: THREE.Vector3,\n  objVector: THREE.Mesh\n): void => {\n  var pos = objVector.position;\n\n  const tween = new TWEEN.Tween(pos)\n    .to(vector)\n    .easing(TWEEN.Easing.Quadratic.Out)\n    .onUpdate(() => {\n      objVector.position.set(pos.x, pos.y, pos.z);\n    });\n\n  tween.start();\n};\n","import { MutableRefObject } from \"react\";\nimport * as THREE from \"three\";\nimport TWEEN from \"@tweenjs/tween.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\n/**\n * Generates a three-dimensional linear algebra graph.\n * @param ref referencing div element for visualisation.\n * @param scene scene object.\n * @param renderer renderer object.\n * @param material material object.\n */\nexport const graph = (\n  ref: MutableRefObject<HTMLDivElement | null>,\n  scene: THREE.Scene,\n  renderer: THREE.Renderer,\n  material: THREE.Material,\n): void => {\n  const dims = dimensions();\n\n  const camera = new THREE.PerspectiveCamera(\n    75,\n    dims.width / dims.height,\n    0.1,\n    1000\n  );\n\n  const element = ref?.current?.appendChild(renderer.domElement);\n\n  element && (element.style.margin = \"0 auto\");\n\n  const axisGeometry = new THREE.CylinderGeometry(0.05, 0.05, 16, 64);\n  const xAxis = new THREE.Mesh(axisGeometry, material);\n  xAxis.rotation.z = Math.PI / 2;\n  const yAxis = new THREE.Mesh(axisGeometry, material);\n  const zAxis = new THREE.Mesh(axisGeometry, material);\n  zAxis.rotation.x = Math.PI / 2;\n  scene.add(xAxis);\n  scene.add(yAxis);\n  scene.add(zAxis);\n\n  const coneGeometry = new THREE.ConeGeometry(0.3, 0.6, 64);\n  const xCone = new THREE.Mesh(coneGeometry, material);\n  xCone.position.x = 8;\n  xCone.rotation.z = -Math.PI / 2;\n  const yCone = new THREE.Mesh(coneGeometry, material);\n  yCone.position.y = 8;\n  const zCone = new THREE.Mesh(coneGeometry, material);\n  zCone.position.z = 8;\n  zCone.rotation.x = Math.PI / 2;\n  scene.add(xCone);\n  scene.add(yCone);\n  scene.add(zCone);\n\n  const tickGeometry = new THREE.BoxGeometry(0.03, 0.5, 0.03);\n\n  for (let i = -7; i < 8; i++) {\n    const xTick = new THREE.Mesh(tickGeometry, material);\n    xTick.position.x = i;\n    xTick.rotation.x = Math.PI / 2;\n    const yTick = new THREE.Mesh(tickGeometry, material);\n    yTick.position.y = i;\n    yTick.rotation.z = Math.PI / 2;\n    const zTick = new THREE.Mesh(tickGeometry, material);\n    zTick.position.z = i;\n    scene.add(xTick);\n    scene.add(yTick);\n    scene.add(zTick);\n  }\n\n  const light1 = new THREE.DirectionalLight(0xffffff, 0.7);\n  const light2 = new THREE.DirectionalLight(0xffffff, 0.7);\n  light1.position.set(8, 8, 8);\n  light2.position.set(-8, -8, -8);\n  scene.add(light1);\n  scene.add(light2);\n\n  const controls = new OrbitControls(camera, renderer.domElement);\n  controls.update();\n\n  camera.rotation.set(-0.57, 0.74, 0.41);\n  camera.position.set(9.42, 5.59, 8.72);\n\n  const animate = () => {\n    requestAnimationFrame(animate);\n    TWEEN.update();\n    renderer.render(scene, camera);\n  };\n\n  animate();\n}\n\n/**\n * Returns a square of three dimensional vector coordinates.\n * @param x width of the x-axis.\n * @param y width of the y-axis.\n * @param z width of the z-axis.\n * @param vectors amount of vectors to use per side.\n * @returns coordinates to the appropriate vectors.\n */\nexport const squareTemplate = (\n  x: number,\n  y: number,\n  z: number,\n  vectors: number,\n): Array<THREE.Vector3> => {\n  let coords = [];\n\n  for (let i = -0.5 * x; i <= 0.5 * x; i += x / (vectors - 1)) {\n    coords.push(new THREE.Vector3(i, 0.5 * y, 0.5 * z));\n    coords.push(new THREE.Vector3(i, -0.5 * y, 0.5 * z));\n    coords.push(new THREE.Vector3(i, 0.5 * y, -0.5 * z));\n    coords.push(new THREE.Vector3(i, -0.5 * y, -0.5 * z));\n  }\n\n  for (let i = -0.5 * y; i <= 0.5 * y; i += y / (vectors - 1)) {\n    coords.push(new THREE.Vector3(0.5 * x, i, 0.5 * z));\n    coords.push(new THREE.Vector3(-0.5 * x, i, 0.5 * z));\n    coords.push(new THREE.Vector3(0.5 * x, i, -0.5 * z));\n    coords.push(new THREE.Vector3(-0.5 * x, i, -0.5 * z));\n  }\n\n  for (let i = -0.5 * z; i <= 0.5 * z; i += z / (vectors - 1)) {\n    coords.push(new THREE.Vector3(0.5 * x, 0.5 * y, i));\n    coords.push(new THREE.Vector3(-0.5 * x, 0.5 * y, i));\n    coords.push(new THREE.Vector3(0.5 * x, -0.5 * y, i));\n    coords.push(new THREE.Vector3(-0.5 * x, -0.5 * y, i));\n  }\n\n  return coords;\n}\n\ninterface DimsType {\n  margin: Margin;\n  padding: Margin;\n  outerWidth: number;\n  outerHeight: number;\n  ticks: number;\n  innerWidth: number;\n  innerHeight: number;\n  width: number;\n  height: number;\n  origin: { x: number; y: number };\n  unit: { x: number; y: number };\n}\n\ninterface Margin {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n}\n\n/**\n * Returns the dimensions of the graph.\n * @returns object containing the dimensions of the graph.\n */\nexport const dimensions = (): DimsType => {\n  const dims: any = {\n    margin: { top: 0, right: 0, bottom: 0, left: 0 },\n    padding: { top: 0, right: 0, bottom: 0, left: 0 },\n    outerWidth: window.outerWidth,\n    outerHeight: window.outerHeight,\n    ticks: 10,\n  };\n\n  dims.innerWidth = dims.outerWidth - dims.margin.left - dims.margin.right;\n  dims.innerHeight = dims.outerHeight - dims.margin.top - dims.margin.bottom;\n  dims.width = dims.innerWidth - dims.padding.left - dims.padding.right;\n  dims.height = dims.innerHeight - dims.padding.top - dims.padding.bottom;\n\n  dims.origin = {\n    x: dims.innerWidth / 2,\n    y: dims.innerHeight / 2,\n  };\n\n  dims.unit = {\n    x: dims.innerWidth / (dims.ticks + 1.5),\n    y: dims.innerHeight / (dims.ticks + 1.5),\n  };\n\n  return dims;\n};\n","import { useState, useEffect } from \"react\";\n\nimport { Vector } from \"../utils/types\";\nimport \"./MatrixInput.css\";\n\ninterface MatrixInputProps {\n  rows: [Vector, (arg1: Vector) => void][];\n}\n\nexport default function MatrixInput(props: MatrixInputProps) {\n  const { rows } = props;\n\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: \"7px 18px 12px 18px 12px 18px 7px\",\n        gridGap: 4,\n        zIndex: 1,\n      }}\n    >\n      <MatrixOpen />\n      <MatrixInputCell\n        value={rows[0][0][0]}\n        classString=\"a\"\n        row={rows[0][0]}\n        setRow={(coords: Vector) => rows[0][1](coords)}\n        length={3}\n      />\n      <MatrixInputCell\n        value={rows[0][0][1]}\n        classString=\"b\"\n        row={rows[0][0]}\n        setRow={(coords: Vector) => rows[0][1](coords)}\n        length={3}\n      />\n      <MatrixInputCell\n        value={rows[0][0][2]}\n        classString=\"e\"\n        row={rows[0][0]}\n        setRow={(coords: Vector) => rows[0][1](coords)}\n        length={3}\n      />\n      <MatrixInputCell\n        value={rows[1][0][0]}\n        classString=\"c\"\n        row={rows[1][0]}\n        setRow={(coords: Vector) => rows[1][1](coords)}\n        length={3}\n      />\n      <MatrixInputCell\n        value={rows[1][0][1]}\n        classString=\"d\"\n        row={rows[1][0]}\n        setRow={(coords: Vector) => rows[1][1](coords)}\n        length={3}\n      />\n      <MatrixInputCell\n        value={rows[1][0][2]}\n        classString=\"f\"\n        row={rows[1][0]}\n        setRow={(coords: Vector) => rows[1][1](coords)}\n        length={3}\n      />\n      <MatrixInputCell\n        value={rows[2][0][0]}\n        classString=\"g\"\n        row={rows[2][0]}\n        setRow={(coords: Vector) => rows[2][1](coords)}\n        length={3}\n      />\n      <MatrixInputCell\n        value={rows[2][0][1]}\n        classString=\"h\"\n        row={rows[2][0]}\n        setRow={(coords: Vector) => rows[2][1](coords)}\n        length={3}\n      />\n      <MatrixInputCell\n        value={rows[2][0][2]}\n        classString=\"i\"\n        row={rows[2][0]}\n        setRow={(coords: Vector) => rows[2][1](coords)}\n        length={3}\n      />\n      <MatrixClose />\n    </div>\n  );\n}\n\ninterface IMatrixInputCellProps {\n  value: number;\n  classString: string;\n  row: Vector;\n  setRow: (arg1: Vector) => void;\n  length: number;\n}\n\nfunction MatrixInputCell(props: IMatrixInputCellProps) {\n  const { value, classString, row, setRow, length } = props;\n\n  const [current, setCurrent] = useState<number>(value);\n  const [inputWidth, setInputWidth] = useState<string>(\"2ch\");\n\n  useEffect(() => {\n    if (length === 2) {\n      if (classString === \"a\" || classString === \"c\") {\n        setRow([current, row[1]]);\n      } else {\n        setRow([row[0], current]);\n      }\n    } else {\n      if (classString === \"a\" || classString === \"c\" || classString === \"g\") {\n        setRow([current, row[1], row[2]]);\n      } else if (\n        classString === \"b\" ||\n        classString === \"d\" ||\n        classString === \"h\"\n      ) {\n        setRow([row[0], current, row[2]]);\n      } else {\n        setRow([row[0], row[1], current]);\n      }\n    }\n\n    // eslint-disable-next-line\n  }, [current]);\n\n  const adjustVector = (e: any) => {\n    setCurrent(e.target.value);\n    setInputWidth(`${e.target.value.length}ch`);\n  };\n\n  return (\n    <input\n      value={current}\n      className={classString}\n      onChange={adjustVector}\n      style={{\n        width: inputWidth,\n        textAlign: \"center\",\n        fontFamily: \"Katex\",\n        backgroundColor: \"transparent\",\n        color: \"white\",\n        fontSize: 16,\n        border: \"none\",\n        outline: \"none\",\n        margin: \"0 auto\",\n      }}\n    />\n  );\n}\n\nfunction MatrixOpen() {\n  return (\n    <svg height=\"70.8\" width=\"7\" className=\"open3\">\n      <path\n        d=\"M 7 0 l -7 0 l 0 70.8 l 7 0\"\n        stroke=\"white\"\n        strokeWidth=\"3.8\"\n        fill=\"none\"\n      />\n    </svg>\n  );\n}\n\nfunction MatrixClose() {\n  return (\n    <svg height=\"70.8\" width=\"7\" className=\"close3\">\n      <path\n        d=\"M 0 0 l 7 0 l 0 70.8 l -7 0\"\n        stroke=\"white\"\n        strokeWidth=\"3.8\"\n        fill=\"none\"\n      />\n    </svg>\n  );\n}\n","import Latex from \"react-latex-next\";\nimport * as THREE from \"three\";\n\nimport { VectorsAction } from \"../App\";\nimport \"./MatrixTransform.css\";\nimport \"./MatrixTransform.css\";\n\ninterface MatrixTransformProps {\n  matrix: THREE.Matrix3;\n  vectorsDispatch: (arg0: VectorsAction) => void;\n  transpose?: boolean;\n}\n\nexport default function MatrixTransform(props: MatrixTransformProps) {\n  const { matrix, vectorsDispatch, transpose } = props;\n\n  var matrixString = \"\";\n  for (const i in matrix.elements) {\n    const element = matrix.elements[i];\n\n    if ((parseInt(i) + 1) % 3 === 0 && i !== \"8\") {\n      matrixString += `${element.toFixed(2)}\\\\\\\\`;\n    } else if (i !== \"8\") {\n      matrixString += `${element.toFixed(2)}&`;\n    } else {\n      matrixString += element.toFixed(2);\n    }\n  }\n\n  return (\n    <div\n      className=\"matrix\"\n      style={{ marginTop: transpose ? -14 : -10 }}\n      onClick={() =>\n        vectorsDispatch({\n          type: \"apply-matrix\",\n          matrix: transpose ? matrix : matrix.transpose(),\n        })\n      }\n    >\n      <Latex>{`$$ \\\\begin{bmatrix} ${matrixString} \\\\end{bmatrix} ${\n        transpose ? \"^\\\\top\" : \"\"\n      } $$`}</Latex>\n    </div>\n  );\n}\n","import { useCallback } from \"react\";\nimport { VectorsAction } from \"../App\";\n\ninterface PolarCoords {\n  r: number;\n  phi: number;\n}\ninterface ResetProps {\n  defaultVectors?: Array<[PolarCoords, (arg1: PolarCoords) => void]>;\n  vectorsDispatch?: (arg0: VectorsAction) => void;\n}\n\nexport default function Reset(props: ResetProps) {\n  const { defaultVectors, vectorsDispatch } = props;\n\n  const reset = useCallback(() => {\n    if (defaultVectors) {\n      defaultVectors.forEach(([defaultVector, setVector]) => {\n        setVector(defaultVector);\n      });\n    }\n\n    if (vectorsDispatch) {\n      vectorsDispatch({ type: \"reset\" });\n    }\n  }, [defaultVectors]);\n\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      className=\"matrix\"\n      viewBox=\"0 0 15 15\"\n      fill=\"white\"\n      onClick={reset}\n      style={{ margin: \"3px auto\", display: \"block\" }}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M1.84998 7.49998C1.84998 4.66458 4.05979 1.84998 7.49998 1.84998C10.2783 1.84998 11.6515 3.9064 12.2367 5H10.5C10.2239 5 10 5.22386 10 5.5C10 5.77614 10.2239 6 10.5 6H13.5C13.7761 6 14 5.77614 14 5.5V2.5C14 2.22386 13.7761 2 13.5 2C13.2239 2 13 2.22386 13 2.5V4.31318C12.2955 3.07126 10.6659 0.849976 7.49998 0.849976C3.43716 0.849976 0.849976 4.18537 0.849976 7.49998C0.849976 10.8146 3.43716 14.15 7.49998 14.15C9.44382 14.15 11.0622 13.3808 12.2145 12.2084C12.8315 11.5806 13.3133 10.839 13.6418 10.0407C13.7469 9.78536 13.6251 9.49315 13.3698 9.38806C13.1144 9.28296 12.8222 9.40478 12.7171 9.66014C12.4363 10.3425 12.0251 10.9745 11.5013 11.5074C10.5295 12.4963 9.16504 13.15 7.49998 13.15C4.05979 13.15 1.84998 10.3354 1.84998 7.49998Z\"\n        fill-rule=\"evenodd\"\n        clip-rule=\"evenodd\"\n      ></path>\n    </svg>\n  );\n}\n","import { useCallback, useState } from \"react\";\n\nexport default function Info() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClick = useCallback(() => {\n    setIsOpen((prev) => !prev);\n  }, []);\n\n  return (\n    <div style={{ position: \"absolute\", top: 12, right: 12 }}>\n      <svg\n        width=\"28\"\n        height=\"28\"\n        viewBox=\"0 0 15 15\"\n        className=\"matrix\"\n        fill=\"white\"\n        onClick={handleClick}\n        style={{ position: \"absolute\", top: 0, right: 0 }}\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M0.877075 7.49972C0.877075 3.84204 3.84222 0.876892 7.49991 0.876892C11.1576 0.876892 14.1227 3.84204 14.1227 7.49972C14.1227 11.1574 11.1576 14.1226 7.49991 14.1226C3.84222 14.1226 0.877075 11.1574 0.877075 7.49972ZM7.49991 1.82689C4.36689 1.82689 1.82708 4.36671 1.82708 7.49972C1.82708 10.6327 4.36689 13.1726 7.49991 13.1726C10.6329 13.1726 13.1727 10.6327 13.1727 7.49972C13.1727 4.36671 10.6329 1.82689 7.49991 1.82689ZM8.24993 10.5C8.24993 10.9142 7.91414 11.25 7.49993 11.25C7.08571 11.25 6.74993 10.9142 6.74993 10.5C6.74993 10.0858 7.08571 9.75 7.49993 9.75C7.91414 9.75 8.24993 10.0858 8.24993 10.5ZM6.05003 6.25C6.05003 5.57211 6.63511 4.925 7.50003 4.925C8.36496 4.925 8.95003 5.57211 8.95003 6.25C8.95003 6.74118 8.68002 6.99212 8.21447 7.27494C8.16251 7.30651 8.10258 7.34131 8.03847 7.37854L8.03841 7.37858C7.85521 7.48497 7.63788 7.61119 7.47449 7.73849C7.23214 7.92732 6.95003 8.23198 6.95003 8.7C6.95004 9.00376 7.19628 9.25 7.50004 9.25C7.8024 9.25 8.04778 9.00601 8.05002 8.70417L8.05056 8.7033C8.05924 8.6896 8.08493 8.65735 8.15058 8.6062C8.25207 8.52712 8.36508 8.46163 8.51567 8.37436L8.51571 8.37433C8.59422 8.32883 8.68296 8.27741 8.78559 8.21506C9.32004 7.89038 10.05 7.35382 10.05 6.25C10.05 4.92789 8.93511 3.825 7.50003 3.825C6.06496 3.825 4.95003 4.92789 4.95003 6.25C4.95003 6.55376 5.19628 6.8 5.50003 6.8C5.80379 6.8 6.05003 6.55376 6.05003 6.25Z\"\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n        ></path>\n      </svg>\n      <div\n        style={{\n          width: 360,\n          marginTop: 36,\n          backgroundColor: \"black\",\n          border: \"1px solid white\",\n          display: isOpen ? \"block\" : \"none\",\n          padding: 12,\n        }}\n      >\n        <div style={{ fontSize: 24, textAlign: \"center\" }}>\n          <b>Info</b>\n        </div>\n        You can change the matrix input by clicking on the matrix values and\n        changing them like any other input. When you have put in your desired\n        matrix, you can click on the matrices to apply them to the vectors\n        (visualised as dots). You should click the matrices in the order of\n        which they would be applied, which is, of course, from right to left.\n        Click on the arrow to reset the vectors to their original positions.\n        Click{\" \"}\n        <a href=\"https://en.wikipedia.org/wiki/Singular_value_decomposition\">\n          here\n        </a>{\" \"}\n        to learn more about singular value decomposition.\n      </div>\n    </div>\n  );\n}\n","import \"katex/dist/katex.min.css\";\nimport { useEffect, useRef, useState, useReducer } from \"react\";\nimport { SingularValueDecomposition } from \"ml-matrix\";\nimport Latex from \"react-latex-next\";\nimport * as THREE from \"three\";\nimport _ from \"lodash\";\n\nimport { vectorCreate, vectorRotate, vectorScale } from \"./utils/vectors\";\nimport { graph, dimensions, squareTemplate } from \"./utils/linalg\";\nimport MatrixInput from \"./components/MatrixInput\";\nimport MatrixTransform from \"./components/MatrixTransform\";\nimport Reset from \"./components/Reset\";\nimport Info from \"./components/Info\";\n\nexport type VectorsAction =\n  | { type: \"apply-matrix\"; matrix: THREE.Matrix3 }\n  | { type: \"reset\" }\n  | { type: \"init\" };\n\ntype VectorsState = {\n  vectors: Array<THREE.Vector3>;\n  objects: Array<THREE.Mesh>;\n};\n\nconst App = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const dims = dimensions();\n\n  const scene = new THREE.Scene();\n  const renderer = new THREE.WebGLRenderer({ antialias: true });\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(dims.width, dims.height);\n  renderer.outputEncoding = THREE.sRGBEncoding;\n  const material = new THREE.MeshPhongMaterial({\n    color: 0xffffff,\n    specular: 0xffffff,\n    shininess: 50,\n  });\n\n  useEffect(() => {\n    graph(ref, scene, renderer, material);\n\n    // eslint-disable-next-line\n  }, []);\n\n  /**\n   * Initialises the three dimensional vectors in a 5x5x5 cube.\n   * @returns initialised vector coordinates with appropriate objects.\n   */\n  const vectorsInit = () => {\n    const squareCoords = squareTemplate(5, 5, 5, 5);\n    const objects: Array<THREE.Mesh> = [];\n    squareCoords.forEach((vec) => {\n      objects.push(vectorCreate(vec, scene));\n    });\n\n    return { vectors: squareCoords, objects: objects };\n  };\n\n  /**\n   * Does all the computation that determine the new state of the vectors.\n   * @param state state of the vectors.\n   * @param action either apply matrix or reset vectors.\n   * @returns new state.\n   */\n  const vectorsReducer = (\n    state: VectorsState,\n    action: VectorsAction\n  ): VectorsState => {\n    switch (action.type) {\n      case \"apply-matrix\":\n        const updatedVectors = _.cloneDeep(state.vectors).map((vec) =>\n          vec.applyMatrix3(action.matrix)\n        );\n\n        var scaled = 0;\n        updatedVectors.forEach((vec, i) => {\n          const object = state.objects[i];\n\n          const vecLength = Math.round(vec.length() * 100) / 100;\n          const objVecLength = Math.round(object.position.length() * 100) / 100;\n\n          if (vecLength !== objVecLength) {\n            scaled += 1;\n          }\n        });\n\n        // if one should scale, scale all of them, because\n        // scale always works, but rotation can mess up if it should scale\n        if (scaled) {\n          updatedVectors.forEach((vec, i) => {\n            const object = state.objects[i];\n            vectorScale(vec, object);\n          });\n        } else {\n          updatedVectors.forEach((_, i) => {\n            const object = state.objects[i];\n            vectorRotate(action.matrix, object);\n          });\n        }\n\n        return {\n          vectors: updatedVectors,\n          objects: state.objects,\n        };\n\n      case \"reset\":\n        const newVectors = vectorsInit().vectors;\n        newVectors.forEach((vec, i) => vectorScale(vec, state.objects[i]));\n\n        return {\n          vectors: newVectors,\n          objects: state.objects,\n        };\n\n      default:\n        throw new Error();\n    }\n  };\n\n  // eslint-disable-next-line\n  const [vectors, vectorsDispatch] = useReducer(\n    vectorsReducer,\n    undefined,\n    vectorsInit\n  );\n\n  // do not use three.matrix3 type for these, since it has to be used by a\n  // different package and requires user input\n  const [row1, setRow1] = useState([1, 2, 3]);\n  const [row2, setRow2] = useState([4, 5, 6]);\n  const [row3, setRow3] = useState([7, 8, 9]);\n  const svd = new SingularValueDecomposition([row1, row2, row3]);\n\n  return (\n    <>\n      <div>\n        <div ref={ref} />\n        <div style={{ marginBottom: 6, marginTop: -265 }}>\n          <Reset vectorsDispatch={vectorsDispatch} />\n        </div>\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <MatrixInput\n            rows={[\n              [row1, setRow1],\n              [row2, setRow2],\n              [row3, setRow3],\n            ]}\n          />\n          <div\n            style={{\n              marginLeft: 3,\n              marginRight: 3,\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <Latex>$$=$$</Latex>\n          </div>\n          <MatrixTransform\n            matrix={new THREE.Matrix3().fromArray([\n              ...svd.leftSingularVectors.getRow(0),\n              ...svd.leftSingularVectors.getRow(1),\n              ...svd.leftSingularVectors.getRow(2),\n            ])}\n            vectorsDispatch={vectorsDispatch}\n          />\n          <MatrixTransform\n            matrix={new THREE.Matrix3().fromArray([\n              ...svd.diagonalMatrix.getRow(0),\n              ...svd.diagonalMatrix.getRow(1),\n              ...svd.diagonalMatrix.getRow(2),\n            ])}\n            vectorsDispatch={vectorsDispatch}\n          />\n          <MatrixTransform\n            matrix={new THREE.Matrix3().fromArray([\n              ...svd.rightSingularVectors.getRow(0),\n              ...svd.rightSingularVectors.getRow(1),\n              ...svd.rightSingularVectors.getRow(2),\n            ])}\n            vectorsDispatch={vectorsDispatch}\n            transpose\n          />\n        </div>\n      </div>\n      <Info />\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}