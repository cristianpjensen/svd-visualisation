{"version":3,"sources":["store.ts","components/threeworld/Circle.tsx","components/threeworld/Vectors.tsx","components/threeworld/RenderCycler.tsx","components/ThreeWorld.tsx","components/controls/MatrixInput.tsx","components/controls/MatrixTransform.tsx","components/icons/Refresh.tsx","components/controls/Refresh.tsx","components/Controls.tsx","components/icons/Github.tsx","components/icons/Question.tsx","components/Help.tsx","App.tsx","index.tsx"],"names":["INIT_VECTORS","x","y","z","vectors","coords","i","push","Vector3","squareTemplate","useStore","create","set","get","matrix","Matrix3","setMatrixIndex","index","value","m","elements","newMatrix","resetMatrix","lastMatrix","identity","applyMatrix","updatedVectors","_","cloneDeep","map","vec","applyMatrix3","Circle","vector","appliedMatrix","props","mesh","useRef","useState","color","setColor","useEffect","rgb","posToRGB","current","scale","rotate","position","ref","args","objVector","m00","m10","m20","m01","m11","m21","m02","m12","m22","Matrix4","eu","Euler","setFromRotationMatrix","initPos","euler","e","TWEEN","to","easing","Quadratic","Out","onUpdate","eulerMatrix","Math","cos","sin","pos","start","floor","Vectors","state","initVectors","setInitVectors","RenderCycler","memo","useThree","gl","scene","camera","render","useCallback","animate","requestAnimationFrame","ThreeWorld","dpr","window","devicePixelRatio","style","height","innerHeight","width","innerWidth","isPerspectiveCamera","near","far","fov","rotation","OrbitControls","MatrixInput","display","gridTemplateColumns","gridTemplateRows","gridGap","zIndex","InputCell","toString","setValue","handleChange","currentTarget","isNaN","parseFloat","type","textAlign","fontFamily","backgroundColor","fontSize","border","outline","margin","onChange","MatrixTransform","transpose","matrixLatex","setMatrixLatex","latex","forEach","elem","toFixed","marginTop","alignItems","onClick","RefreshIcon","version","viewBox","xmlns","stroke","strokeWidth","strokeLinecap","strokeLinejoin","fill","d","Refresh","handleResetClick","Controls","svd","SingularValueDecomposition","U","fromArray","leftSingularVectors","to1DArray","S","diagonalMatrix","V","rightSingularVectors","bottom","justifyContent","marginBottom","borderColor","borderWidth","borderRadius","borderStyle","padding","GithubIcon","QuestionIcon","fillRule","clipRule","Help","isOpen","setIsOpen","handleOpen","console","log","handleClose","href","target","rel","top","left","right","maxWidth","maxHeight","boxShadow","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2279dd28.chunk.js","sourcesContent":["import create from \"zustand\";\nimport { Matrix3, Vector3 } from \"three\";\nimport _ from \"lodash\";\n\n/**\n * Returns a square of three dimensional vector coordinates.\n * @param x width of the x-axis.\n * @param y width of the y-axis.\n * @param z width of the z-axis.\n * @param vectors amount of vectors to use per side.\n * @returns coordinates to the appropriate vectors.\n */\nconst squareTemplate = (\n  x: number,\n  y: number,\n  z: number,\n  vectors: number\n): Array<Vector3> => {\n  let coords = [];\n\n  for (let i = -0.5 * x; i <= 0.5 * x; i += x / (vectors - 1)) {\n    coords.push(new Vector3(i, 0.5 * y, 0.5 * z));\n    coords.push(new Vector3(i, -0.5 * y, 0.5 * z));\n    coords.push(new Vector3(i, 0.5 * y, -0.5 * z));\n    coords.push(new Vector3(i, -0.5 * y, -0.5 * z));\n  }\n\n  for (let i = -0.5 * y; i <= 0.5 * y; i += y / (vectors - 1)) {\n    coords.push(new Vector3(0.5 * x, i, 0.5 * z));\n    coords.push(new Vector3(-0.5 * x, i, 0.5 * z));\n    coords.push(new Vector3(0.5 * x, i, -0.5 * z));\n    coords.push(new Vector3(-0.5 * x, i, -0.5 * z));\n  }\n\n  for (let i = -0.5 * z; i <= 0.5 * z; i += z / (vectors - 1)) {\n    coords.push(new Vector3(0.5 * x, 0.5 * y, i));\n    coords.push(new Vector3(-0.5 * x, 0.5 * y, i));\n    coords.push(new Vector3(0.5 * x, -0.5 * y, i));\n    coords.push(new Vector3(-0.5 * x, -0.5 * y, i));\n  }\n\n  return coords;\n};\n\ninterface Store {\n  matrix: Matrix3;\n  setMatrixIndex: (index: number, value: number) => void;\n  resetMatrix: () => void;\n  applyMatrix: (matrix: Matrix3) => void;\n  lastMatrix: Matrix3;\n  vectors: Array<Vector3>;\n}\n\nconst INIT_VECTORS = squareTemplate(10, 10, 10, 5);\n\nexport const useStore = create<Store>((set, get) => ({\n  matrix: new Matrix3().set(0, 1, 1, 1.41, 2, 0, 0, 1, 1),\n  setMatrixIndex: (index, value) => {\n    const m = get().matrix.elements;\n\n    const newMatrix = new Matrix3();\n    if (index === 0) {\n      newMatrix.set(value, m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8]);\n    } else if (index === 1) {\n      newMatrix.set(m[0], value, m[2], m[3], m[4], m[5], m[6], m[7], m[8]);\n    } else if (index === 2) {\n      newMatrix.set(m[0], m[1], value, m[3], m[4], m[5], m[6], m[7], m[8]);\n    } else if (index === 3) {\n      newMatrix.set(m[0], m[1], m[2], value, m[4], m[5], m[6], m[7], m[8]);\n    } else if (index === 4) {\n      newMatrix.set(m[0], m[1], m[2], m[3], value, m[5], m[6], m[7], m[8]);\n    } else if (index === 5) {\n      newMatrix.set(m[0], m[1], m[2], m[3], m[4], value, m[6], m[7], m[8]);\n    } else if (index === 6) {\n      newMatrix.set(m[0], m[1], m[2], m[3], m[4], m[5], value, m[7], m[8]);\n    } else if (index === 7) {\n      newMatrix.set(m[0], m[1], m[2], m[3], m[4], m[5], m[6], value, m[8]);\n    } else if (index === 8) {\n      newMatrix.set(m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], value);\n    }\n\n    set({ matrix: newMatrix });\n  },\n  resetMatrix: () =>\n    set({ vectors: INIT_VECTORS, lastMatrix: new Matrix3().identity() }),\n  applyMatrix: (matrix) => {\n    const vectors = get().vectors;\n\n    const updatedVectors = _.cloneDeep(vectors).map((vec) =>\n      vec.applyMatrix3(matrix)\n    );\n\n    set({ vectors: updatedVectors, lastMatrix: matrix });\n  },\n  lastMatrix: new Matrix3().identity(),\n  vectors: INIT_VECTORS,\n}));\n","import { useEffect, useRef, useState } from \"react\";\nimport { MeshProps } from \"@react-three/fiber\";\nimport { Mesh, Vector3, Matrix3, Matrix4, Euler } from \"three\";\nimport * as TWEEN from \"@tweenjs/tween.js\";\nimport _ from \"lodash\";\n\ninterface CircleProps extends MeshProps {\n  vector: Vector3;\n  appliedMatrix: Matrix3;\n}\n\nexport const Circle = ({\n  vector,\n  appliedMatrix: matrix,\n  ...props\n}: CircleProps) => {\n  const mesh = useRef<Mesh>();\n\n  const [color, setColor] = useState<string>(\"\");\n\n  useEffect(() => {\n    const rgb = posToRGB(vector);\n    setColor(rgb);\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (mesh.current) {\n      // Check if it is a scale matrix (by checking whether is S).\n      const m = matrix.elements;\n      const isScaleMatrix =\n        m[1] + m[2] + m[3] + m[5] + m[6] + m[7] === 0 &&\n        m[0] + m[4] + m[8] !== 0;\n      if (isScaleMatrix) {\n        scale(vector, mesh.current);\n      } else {\n        rotate(matrix, mesh.current);\n      }\n    }\n  }, [mesh, vector, matrix]);\n\n  return (\n    <mesh position={vector} {...props} ref={mesh}>\n      <sphereGeometry args={[0.3, 32, 32]} />\n      <meshMatcapMaterial color={color} />\n    </mesh>\n  );\n};\n\n/**\n * Rotates the vector with the rotation matrix. Make sure that the length stays\n * the same after the transformation, because this function only works with\n * rotation matrices. If there is any chance of the matrix not being a rotation\n * matrix, make use of the `vectorScale()` function.\n *\n * This calculates the euler angle from the rotation matrix, after which it\n * tweens between 0 and the euler angle. Then, every iteration of the tween, it\n * computes the matrix for the current euler angle and applies it to the vector.\n * @param matrix rotation matrix.\n * @param objVector vector object to move.\n */\nconst rotate = (matrix: Matrix3, objVector: Mesh): void => {\n  // get angle and rotation axis from matrix\n  const [m00, m10, m20, m01, m11, m21, m02, m12, m22] = matrix.elements;\n\n  const m = new Matrix4();\n  m.set(m00, m01, m02, 1, m10, m11, m12, 1, m20, m21, m22, 1, 0, 0, 0, 1);\n\n  var eu = new Euler();\n  eu.setFromRotationMatrix(m, \"ZYX\");\n\n  const initPos = _.cloneDeep(objVector.position);\n  var euler = {\n    x: 0,\n    y: 0,\n    z: 0,\n  };\n  const e = { x: eu.x, y: eu.y, z: eu.z };\n\n  const tween = new TWEEN.Tween(euler)\n    .to(e, 1000)\n    .easing(TWEEN.Easing.Quadratic.Out)\n    .onUpdate(() => {\n      const eulerMatrix = new Matrix3();\n\n      // https://en.wikipedia.org/wiki/Rotation_formalisms_in_three_dimensions#Conversion_formulae_between_formalisms\n      const { x, y, z } = euler;\n      eulerMatrix.set(\n        Math.cos(y) * Math.cos(z),\n        -Math.cos(x) * Math.sin(z) + Math.sin(x) * Math.sin(y) * Math.cos(z),\n        Math.sin(x) * Math.sin(z) + Math.cos(x) * Math.sin(y) * Math.cos(z),\n        Math.cos(y) * Math.sin(z),\n        Math.cos(x) * Math.cos(z) + Math.sin(x) * Math.sin(y) * Math.sin(z),\n        -Math.sin(x) * Math.cos(z) + Math.cos(x) * Math.sin(y) * Math.sin(z),\n        -Math.sin(y),\n        Math.sin(x) * Math.cos(y),\n        Math.cos(x) * Math.cos(y)\n      );\n\n      const init = _.cloneDeep(initPos);\n      const pos = init.applyMatrix3(eulerMatrix);\n      objVector.position.set(pos.x, pos.y, pos.z);\n    });\n\n  tween.start();\n};\n\n/**\n * Moves `objVector` to the position of `vector` by scaling. It basically just\n * goes from the (x, y, z)-position of the object to the (x, y, z)-position of\n * the vector.\n * @param vector vector to go to.\n * @param objVector vector to move.\n */\nexport const scale = (vector: Vector3, mesh: Mesh): void => {\n  var pos = mesh.position;\n\n  const tween = new TWEEN.Tween(pos)\n    .to(vector)\n    .easing(TWEEN.Easing.Quadratic.Out)\n    .onUpdate(() => {\n      mesh.position.set(pos.x, pos.y, pos.z);\n    });\n\n  tween.start();\n};\n\n/**\n * Computes the RGB colour code to assign to a vector. It basically just\n * assigns the x-, y-, and z-component to the red, green, and blue channel,\n * respectively.\n * @param vector three dimensional vector.\n * @returns rgb colour code.\n */\nconst posToRGB = (vector: Vector3): string => {\n  const x = Math.floor(((vector.x + 12) / 17) * 255);\n  const y = Math.floor(((vector.y + 12) / 17) * 255);\n  const z = Math.floor(((vector.z + 12) / 17) * 255);\n\n  return `rgb(${x}, ${y}, ${z})`;\n};\n","import { useEffect, useState } from \"react\";\nimport { Vector3 } from \"three\";\nimport { useStore } from \"../../store\";\nimport { Circle } from \"./Circle\";\n\nexport const Vectors = () => {\n  const { vectors, matrix } = useStore((state) => ({\n    vectors: state.vectors,\n    matrix: state.lastMatrix,\n  }));\n\n  const [initVectors, setInitVectors] = useState<Array<Vector3>>([]);\n\n  useEffect(() => {\n    setInitVectors(vectors);\n  }, [vectors]);\n\n  return (\n    <>\n      {vectors.map((vector, i) => (\n        <Circle\n          key={i}\n          vector={vector}\n          appliedMatrix={matrix}\n          position={initVectors[i]}\n        />\n      ))}\n    </>\n  );\n};\n","import { memo, useCallback } from \"react\";\nimport { useThree } from \"@react-three/fiber\";\nimport * as TWEEN from \"@tweenjs/tween.js\";\n\nexport const RenderCycler = memo(() => {\n  const { gl, scene, camera } = useThree();\n\n  const render = useCallback(() => {\n    gl.render(scene, camera);\n  }, [gl, scene, camera]);\n\n  const animate = useCallback(() => {\n    requestAnimationFrame(animate);\n    TWEEN.update();\n    render();\n  }, [render]);\n\n  animate();\n\n  return <></>;\n});\n","import { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { Vectors } from \"./threeworld/Vectors\";\nimport { RenderCycler } from \"./threeworld/RenderCycler\";\n\nexport const ThreeWorld = () => {\n  return (\n    <Canvas\n      dpr={window.devicePixelRatio}\n      style={{ height: window.innerHeight, width: window.innerWidth }}\n      camera={{\n        isPerspectiveCamera: true,\n        near: 0.1,\n        far: 1000,\n        fov: 75,\n        rotation: [-0.57, 0.74, 0.41],\n        position: [9.42, 5.59, 8.72],\n      }}\n    >\n      <ambientLight />\n      <gridHelper args={[100, 100, \"white\", \"rgb(40, 40, 40)\"]} />\n      <Vectors />\n      <RenderCycler />\n      <OrbitControls />\n    </Canvas>\n  );\n};\n","import React, { useCallback, useState } from \"react\";\nimport { useStore } from \"../../store\";\n\nexport const MatrixInput = () => {\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(3, 1fr)\",\n        gridTemplateRows: \"repeat(3, 1fr)\",\n        gridGap: \"0.5rem\",\n        zIndex: 1,\n      }}\n    >\n      <InputCell index={0} />\n      <InputCell index={1} />\n      <InputCell index={2} />\n      <InputCell index={3} />\n      <InputCell index={4} />\n      <InputCell index={5} />\n      <InputCell index={6} />\n      <InputCell index={7} />\n      <InputCell index={8} />\n    </div>\n  );\n};\n\ninterface InputCellProps {\n  index: number;\n}\n\nconst InputCell = ({ index }: InputCellProps) => {\n  const [matrix, setMatrixIndex] = useStore((state) => [\n    state.matrix,\n    state.setMatrixIndex,\n  ]);\n  const [value, setValue] = useState<string>(matrix.elements[index].toString());\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      const current = e.currentTarget.value;\n\n      if (!isNaN(parseFloat(current)) && current !== \"\") {\n        setMatrixIndex(index, parseFloat(current));\n      }\n\n      setValue(current);\n    },\n    [index, setMatrixIndex]\n  );\n\n  return (\n    <input\n      type=\"number\"\n      style={{\n        width: \"4ch\",\n        textAlign: \"center\",\n        fontFamily: \"Katex\",\n        color: \"lightgreen\",\n        backgroundColor: \"transparent\",\n        fontSize: 16,\n        border: \"none\",\n        outline: \"none\",\n        margin: \"0px auto\",\n      }}\n      value={value}\n      onChange={handleChange}\n    />\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport Latex from \"react-latex-next\";\nimport { Matrix3 } from \"three\";\nimport { useStore } from \"../../store\";\n\ninterface MatrixTransformProps {\n  matrix: Matrix3;\n  transpose?: boolean;\n}\n\nexport const MatrixTransform = ({\n  matrix,\n  transpose,\n}: MatrixTransformProps) => {\n  const applyMatrix = useStore((state) => state.applyMatrix);\n  const [matrixLatex, setMatrixLatex] = useState<string>(\"\");\n\n  useEffect(() => {\n    let latex = \"$$\\\\begin{bmatrix}\";\n    matrix.elements.forEach((elem, i) => {\n      if ((i + 1) % 3 === 0 && i + 1 !== 9) {\n        latex += `${elem.toFixed(2)} \\\\\\\\`;\n      } else if (i === 8) {\n        latex += elem.toFixed(2);\n      } else {\n        latex += `${elem.toFixed(2)} &`;\n      }\n    });\n\n    if (transpose) {\n      latex += \"\\\\end{bmatrix}^\\\\top$$\";\n    } else {\n      latex += \"\\\\end{bmatrix}$$\";\n    }\n\n    setMatrixLatex(latex);\n  }, [matrix, transpose]);\n\n  return (\n    <button\n      style={{\n        marginTop: transpose ? -4 : 0,\n        fontSize: 14,\n        display: \"flex\",\n        alignItems: \"center\",\n      }}\n      onClick={() => {\n        if (transpose) {\n          applyMatrix(matrix.transpose());\n        } else {\n          applyMatrix(matrix);\n        }\n      }}\n    >\n      <Latex>{matrixLatex}</Latex>\n    </button>\n  );\n};\n","interface RefreshIconProps {\n  color?: string;\n}\n\nexport const RefreshIcon = ({ color = \"white\" }: RefreshIconProps) => (\n  <svg\n    version=\"1.1\"\n    viewBox=\"0 0 24 24\"\n    width={32}\n    height={32}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g\n      stroke={color}\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    >\n      <path d=\"M19.488,4.639v3.536h-3.535h3.535\"></path>\n      <path d=\"M19.027,8.175c-1.357,-2.487 -3.995,-4.175 -7.027,-4.175c-4.418,0 -8,3.582 -8,8c0,4.418 3.582,8 8,8c4.418,0 8,-3.582 8,-8\"></path>\n    </g>\n    <path fill=\"none\" d=\"M0,0h24v24h-24Z\"></path>\n  </svg>\n);\n","import { useCallback } from \"react\";\nimport { useStore } from \"../../store\";\nimport { RefreshIcon } from \"../icons/Refresh\";\n\nexport const Refresh = () => {\n  const resetMatrix = useStore((state) => state.resetMatrix);\n\n  const handleResetClick = useCallback(() => {\n    resetMatrix();\n  }, [resetMatrix]);\n\n  return (\n    <button onClick={handleResetClick}>\n      <RefreshIcon />\n    </button>\n  );\n};\n","import { SingularValueDecomposition } from \"ml-matrix\";\nimport Latex from \"react-latex-next\";\nimport { Matrix3 } from \"three\";\nimport { MatrixInput } from \"./controls/MatrixInput\";\nimport { MatrixTransform } from \"./controls/MatrixTransform\";\nimport { useStore } from \"../store\";\nimport { Refresh } from \"./controls/Refresh\";\n\nexport const Controls = () => {\n  const matrix = useStore((state) => state.matrix);\n  const m = matrix.transpose().elements;\n  const svd = new SingularValueDecomposition([\n    [m[0], m[1], m[2]],\n    [m[3], m[4], m[5]],\n    [m[6], m[7], m[8]],\n  ]);\n  // The package gives the negative of all values, so invert them\n  const U = new Matrix3().fromArray(\n    svd.leftSingularVectors.to1DArray().map((x) => -x)\n  );\n  const S = new Matrix3().fromArray(svd.diagonalMatrix.to1DArray());\n  const V = new Matrix3().fromArray(\n    svd.rightSingularVectors.to1DArray().map((x) => -x)\n  );\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        bottom: 0,\n        display: \"flex\",\n        justifyContent: \"center\",\n        width: \"100%\",\n        marginBottom: 16,\n      }}\n    >\n      <div\n        style={{\n          backgroundColor: \"black\",\n          borderColor: \"gray\",\n          borderWidth: 2,\n          borderRadius: 16,\n          borderStyle: \"solid\",\n          padding: 16,\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Refresh />\n        </div>\n        <div\n          style={{\n            alignItems: \"center\",\n            display: \"flex\",\n          }}\n        >\n          <MatrixInput />\n          <Latex>$$=$$</Latex>\n          <MatrixTransform matrix={U} />\n          <MatrixTransform matrix={S} />\n          <MatrixTransform matrix={V} transpose />\n        </div>\n      </div>\n    </div>\n  );\n};\n","interface GithubIconProps {\n  color?: string;\n}\n\nexport const GithubIcon = ({ color = \"white\" }: GithubIconProps) => (\n  <svg\n    version=\"1.1\"\n    viewBox=\"0 0 24 24\"\n    width={32}\n    height={32}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g fill=\"none\">\n      <path d=\"M0,0h24v24h-24v-24Z\"></path>\n      <path\n        stroke={color}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"1.5\"\n        d=\"M7.496,21h1.504v-1.036c0,0 -0.017,-1.621 0.874,-2.991c-2.031,-0.142 -3.643,-1.954 -3.643,-4.191c0,-0.785 0.298,-1.517 0.809,-2.147l0.052,-1.933c0.013,-0.491 0.504,-0.826 0.966,-0.659l2.075,0.75c0.586,-0.146 1.213,-0.229 1.867,-0.229c0.654,0 1.281,0.083 1.867,0.23l2.075,-0.75c0.462,-0.167 0.953,0.168 0.966,0.659l0.052,1.932c0.51,0.63 0.809,1.362 0.809,2.147c0,2.237 -1.612,4.049 -3.643,4.191c0.891,1.37 0.874,2.991 0.874,2.991v1.036h1.504c2.483,0 4.496,-2.013 4.496,-4.495v-9.009c0,-2.483 -2.013,-4.496 -4.496,-4.496h-9.004c-2.485,0 -4.5,2.015 -4.5,4.5v9.004c0,2.483 2.013,4.496 4.496,4.496\"\n      ></path>\n    </g>\n  </svg>\n);\n","interface QuestionIconProps {\n  color?: string;\n}\n\nexport const QuestionIcon = ({ color = \"white\" }: QuestionIconProps) => (\n  <svg\n    width={32}\n    height={32}\n    viewBox=\"0 0 15 15\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M0.877075 7.49972C0.877075 3.84204 3.84222 0.876892 7.49991 0.876892C11.1576 0.876892 14.1227 3.84204 14.1227 7.49972C14.1227 11.1574 11.1576 14.1226 7.49991 14.1226C3.84222 14.1226 0.877075 11.1574 0.877075 7.49972ZM7.49991 1.82689C4.36689 1.82689 1.82708 4.36671 1.82708 7.49972C1.82708 10.6327 4.36689 13.1726 7.49991 13.1726C10.6329 13.1726 13.1727 10.6327 13.1727 7.49972C13.1727 4.36671 10.6329 1.82689 7.49991 1.82689ZM8.24993 10.5C8.24993 10.9142 7.91414 11.25 7.49993 11.25C7.08571 11.25 6.74993 10.9142 6.74993 10.5C6.74993 10.0858 7.08571 9.75 7.49993 9.75C7.91414 9.75 8.24993 10.0858 8.24993 10.5ZM6.05003 6.25C6.05003 5.57211 6.63511 4.925 7.50003 4.925C8.36496 4.925 8.95003 5.57211 8.95003 6.25C8.95003 6.74118 8.68002 6.99212 8.21447 7.27494C8.16251 7.30651 8.10258 7.34131 8.03847 7.37854L8.03841 7.37858C7.85521 7.48497 7.63788 7.61119 7.47449 7.73849C7.23214 7.92732 6.95003 8.23198 6.95003 8.7C6.95004 9.00376 7.19628 9.25 7.50004 9.25C7.8024 9.25 8.04778 9.00601 8.05002 8.70417L8.05056 8.7033C8.05924 8.6896 8.08493 8.65735 8.15058 8.6062C8.25207 8.52712 8.36508 8.46163 8.51567 8.37436L8.51571 8.37433C8.59422 8.32883 8.68296 8.27741 8.78559 8.21506C9.32004 7.89038 10.05 7.35382 10.05 6.25C10.05 4.92789 8.93511 3.825 7.50003 3.825C6.06496 3.825 4.95003 4.92789 4.95003 6.25C4.95003 6.55376 5.19628 6.8 5.50003 6.8C5.80379 6.8 6.05003 6.55376 6.05003 6.25Z\"\n      fill={color}\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n    ></path>\n  </svg>\n);\n","import { useCallback, useState } from \"react\";\nimport { GithubIcon } from \"./icons/Github\";\nimport { QuestionIcon } from \"./icons/Question\";\n\nexport const Help = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleOpen = useCallback(() => {\n    setIsOpen(true);\n    console.log(1);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n\n  return (\n    <>\n      <a\n        href=\"https://github.com/cristianpjensen/svd-visualisation\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        style={{ position: \"absolute\", top: 16, left: 16 }}\n      >\n        <GithubIcon />\n      </a>\n      <button\n        style={{\n          position: \"absolute\",\n          top: 16,\n          right: 16,\n        }}\n        onClick={handleOpen}\n      >\n        <QuestionIcon />\n      </button>\n      {isOpen && (\n        <>\n          <div\n            style={{\n              position: \"absolute\",\n              top: 0,\n              left: 0,\n              display: \"flex\",\n              width: \"100%\",\n              height: \"100%\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n            }}\n            onClick={handleClose}\n          >\n            <div\n              style={{\n                backgroundColor: \"black\",\n                zIndex: 2,\n                maxWidth: 500,\n                width: \"100%\",\n                maxHeight: 500,\n                borderRadius: 16,\n                borderColor: \"grey\",\n                borderStyle: \"solid\",\n                borderWidth: 2,\n                padding: 32,\n                boxShadow: \"rgba(0, 0, 0, 0.35) 0px 5px 15px\",\n              }}\n            >\n              <h2 style={{ textAlign: \"center\" }}>\n                Singular Value Decomposition\n              </h2>\n              <div style={{ textAlign: \"justify\", fontSize: 20 }}>\n                <p>\n                  You can change the matrix input by clicking on the green\n                  matrix values and changing them like any other input. The\n                  components of the SVD will adjust dynamically to your input.\n                  When you have put in your desired matrix, you can click on the\n                  matrices one-by-one to apply them to the cube of vectors\n                  (visualised as colourful spheres).\n                </p>\n                <p>\n                  Click on the refresh arrow to reset the vectors to their\n                  original positions.\n                </p>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n","import \"katex/dist/katex.min.css\";\n\nimport { ThreeWorld } from \"./components/ThreeWorld\";\nimport { Controls } from \"./components/Controls\";\nimport { Help } from \"./components/Help\";\n\nconst App = () => {\n  return (\n    <>\n      <ThreeWorld />\n      <Controls />\n      <Help />\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}